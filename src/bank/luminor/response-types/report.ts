/* tslint:disable */
// Generated by https://quicktype.io

export interface Report {
    Locale:      Locale;
    Status:      Status;
    Ver:         string;
    ClientApp:   ClientApp;
    UIID:        Uiid;
    BussinessDt: BussinessDt;
    MsgId:       string;
    TimeStamp:   TimeStamp;
    SecToken:    SECToken;
    EnvVer:      string;
    XMsgId:      string;
    Payload:     Payload;
    SessionId:   string;
    FiId:        FiID;
}

export interface BussinessDt {
    Month: number;
    Ver:   BussinessDtVer;
    Year:  number;
    Day:   number;
}

export enum BussinessDtVer {
    Date100 = "Date_1.0.0",
}

export interface ClientApp {
    ApGrpId:  FiID;
    TrgtOS:   Locale;
    Ver:      string;
    ApId:     FiID;
    ComptLst: ComptLst;
    Typ:      Locale;
    Nam:      string;
    CdngLng:  string;
}

export interface FiID {
    Ver: FiIDVer;
    Id:  string;
}

export enum FiIDVer {
    Identifier100 = "Identifier_1.0.0",
}

export interface ComptLst {
    Ver:        string;
    AppCompLst: AppCompLst[];
}

export interface AppCompLst {
    Ver:        string;
    AppCompVer: AppCompVer;
    Typ:        Locale;
}

export interface AppCompVer {
}

export interface Locale {
    CDE: string;
    DSC: string;
}

export interface Payload {
    Ver:          string;
    EntityCounts: EntityCount[];
    DataEntity:   PayloadDataEntity[];
    Operation:    string;
}

export interface PayloadDataEntity {
    Ver:                 string;
    ReportId:            string;
    ReportDelivery:      Locale;
    Name:                string;
    PayLoads:            PayLoad[];
    Format:              Format;
    PageHeader:          PageHeader;
    PageFooter:          PageFooter;
    ColumnHeaderSection: ColumnHeaderSection;
    Id:                  FiID;
    IMdaCntntLst:        IMDACntntLst;
}

export interface ColumnHeaderSection {
    Ver:           string;
    ColumnHeaders: ColumnHeader[];
}

export interface ColumnHeader {
    Ver:  ColumnHeaderVer;
    Name: string;
}

export enum ColumnHeaderVer {
    ColumnHeader100 = "ColumnHeader_1.0.0",
}

export interface Format {
    MIMETYPE: string;
    CDE:      string;
}

export interface IMDACntntLst {
    IMedCntnt: IMedCntnt[];
    Ver:       string;
}

export interface IMedCntnt {
    Ver:        string;
    MIMEType:   Locale;
    BinLen:     number;
    Nam:        string;
    BinDataStr: string;
}

export interface PageFooter {
    Ver:        string;
    References: { [key: string]: string };
}

export interface PageHeader {
    Ver:        string;
    References: { [key: string]: string };
}

export interface PayLoad {
    RecCtrl:      RecCtrl;
    Ver:          string;
    Filters:      PayLoadFilter[];
    EntityCounts: EntityCount[];
    DataEntity:   PayLoadDataEntity[];
    Operation:    string;
}

export interface PayLoadDataEntity {
    Ver:                string;
    XAttributes:        DataEntityXAttributes;
    AccountId:          DataEntityAccountID;
    AcctBalList:        AcctBALList[];
    DbtTot:             CrdtTot;
    AcctPeriodDataList: any[];
    TransactionList:    TransactionList[];
    CrdtTot:            CrdtTot;
}

export interface DataEntityAccountID {
    Ver:        AccountIDVer;
    IorIdAvble: boolean;
    AcctIds:    PurpleAcctIDS;
    iorId:      string;
}

export interface PurpleAcctIDS {
    IBAN: string;
}

export enum AccountIDVer {
    AccountIdentifier100 = "AccountIdentifier_1.0.0",
}

export interface AcctBALList {
    Ver:     string;
    CurrAmt: CrdtTot;
    BalType: Locale;
}

export interface CrdtTot {
    Ver:      CrdtTotVer;
    Amt:      Amt;
    CurrCode: CurrCode;
}

export interface Amt {
    Ver:   AmtVer;
    Value: string;
}

export enum AmtVer {
    Amount100 = "Amount_1.0.0",
}

export interface CurrCode {
    DISP: string;
    CDE:  CDE;
    DSC:  Dsc;
    SYM:  Sym;
}

export enum CDE {
    Eur = "EUR",
}

export enum Dsc {
    Euro = "Euro",
}

export enum Sym {
    Empty = "â‚¬",
}

export enum CrdtTotVer {
    CurrencyAmount100 = "CurrencyAmount_1.0.0",
}

export interface TransactionList {
    Ver:                 TransactionListVer;
    AccountId:           DataEntityAccountID;
    TxnType:             TxnType;
    EffDt:               Dttime;
    TxnRef?:             TxnRef;
    TxnId:               TxnID;
    XAttributes:         TransactionListXAttributes;
    OrigDt:              BussinessDt;
    CompositeCurAmtList: any[];
    TxnStatus:           TxnStatus;
    TotalCurAmt:         CrdtTot;
    Memo:                string;
}

export interface Dttime {
    Month:     number;
    Ver:       DttimeVer;
    Year:      number;
    Minute:    number;
    Second:    number;
    Hour:      number;
    Fraction?: number;
    Day:       number;
}

export enum DttimeVer {
    DateTime100 = "DateTime_1.0.0",
}

export interface TxnID {
    Ver:    TxnIDVer;
    TxnIds: TxnIDS;
    Id:     FiID;
}

export interface TxnIDS {
    TRANSACTIONID: string;
}

export enum TxnIDVer {
    TransactionIdentifier100 = "TransactionIdentifier_1.0.0",
}

export interface TxnRef {
    Ver:           TxnRefVer;
    CntrPrtyDta:   CntrPrtyDta;
    CardId?:       FiID;
    RefData?:      RefData;
    PymntId?:      string;
    InvcDta?:      InvcDta;
    SalesSlipRef?: string;
}

export interface CntrPrtyDta {
    CntrPrtyNme: string;
    Ver:         CntrPrtyDtaVer;
    AcctRfrnc?:  AcctRfrnc;
}

export interface AcctRfrnc {
    Ver:  AcctRfrncVer;
    Acct: Acct;
}

export interface Acct {
    Ver:                 AcctVer;
    AccountId:           DataEntityAccountID;
    Branch?:             Branch;
    AccountRefDataList?: RefDataList[];
}

export interface RefDataList {
    Ver:        RefDataListVer;
    Type:       Locale;
    IorIdAvble: boolean;
    Id:         string;
}

export enum RefDataListVer {
    ReferenceData100 = "ReferenceData_1.0.0",
}

export interface Branch {
    Ver:     string;
    FiIdent: BranchFiIdent;
}

export interface BranchFiIdent {
    Ver:     string;
    FiIdent: FiIdentFiIdent;
}

export interface FiIdentFiIdent {
    BANKNAME: string;
}

export enum AcctVer {
    DemandDepositAccount100 = "DemandDepositAccount_1.0.0",
}

export enum AcctRfrncVer {
    AccountReference100 = "AccountReference_1.0.0",
}

export enum CntrPrtyDtaVer {
    CounterPartyData100 = "CounterPartyData_1.0.0",
}

export interface InvcDta {
    Ver:        string;
    InvoiceNum: string;
}

export interface RefData {
    Ver:         RefDataVer;
    RefDataList: RefDataList[];
}

export enum RefDataVer {
    ReferenceDataList100 = "ReferenceDataList_1.0.0",
}

export enum TxnRefVer {
    TransactionReference100 = "TransactionReference_1.0.0",
}

export interface TxnStatus {
    Ver:              TxnStatusVer;
    TransactnStatLst: TransactnStatLst[];
}

export interface TransactnStatLst {
    Ver:        TransactnStatLstVer;
    StatusCode: Locale;
}

export enum TransactnStatLstVer {
    TransactionStatus100 = "TransactionStatus_1.0.0",
}

export enum TxnStatusVer {
    TransactionStatusList100 = "TransactionStatusList_1.0.0",
}

export interface TxnType {
    Ver:         TxnTypeVer;
    TypVal:      Locale;
    OthrSubTyp?: string;
}

export enum TxnTypeVer {
    TransactionTypeDetails100 = "TransactionTypeDetails_1.0.0",
}

export enum TransactionListVer {
    Transaction100 = "Transaction_1.0.0",
}

export interface TransactionListXAttributes {
    CustomerName:               string;
    CustomerId:                 string;
    PaymentSpeed?:              string;
    OriginatorReferenceNumber?: string;
}

export interface DataEntityXAttributes {
    ReportGenerationDate: string;
    CustomerName:         string;
    CustomerId:           string;
    ReportGenerationTime: string;
}

export interface EntityCount {
    Ver:          string;
    EntityTypeId: string;
    Count:        number;
}

export interface PayLoadFilter {
    Ver:     string;
    Filters: FilterFilter[];
}

export interface FilterFilter {
    Ver:        string;
    AccountId?: FilterAccountID;
    Operator?:  Operator;
    Date?:      BussinessDt;
}

export interface FilterAccountID {
    Ver:        AccountIDVer;
    IorIdAvble: boolean;
    AcctIds:    FluffyAcctIDS;
    iorId:      string;
}

export interface FluffyAcctIDS {
    IBAN:          string;
    BANKACCOUNTID: string;
}

export interface Operator {
    CDE:  string;
    DESC: string;
}

export interface RecCtrl {
    Ver:             string;
    MaxRecLimit:     number;
    CurrentRecLimit: number;
    Cursor:          Cursor;
}

export interface Cursor {
    Ver:        string;
    CursorData: CursorData;
}

export interface CursorData {
    Ver:  string;
    Data: string;
}

export interface SECToken {
    Ver:   string;
    Token: Token[];
}

export interface Token {
    Ver:       string;
    Type:      Locale;
    Issuer:    string;
    Audience:  Audience[];
    IssuedOn:  Dttime;
    Signature: string;
    UsageCnt:  number;
    TokenId:   string;
    Expiry:    Dttime;
}

export interface Audience {
    Ver:   string;
    AppId: string;
}

export interface Status {
    ServerStatusCd: string;
    Ver:            string;
    Severity:       Locale;
    Code:           number;
}

export interface TimeStamp {
    Ver:    string;
    Dttime: Dttime;
}

export interface Uiid {
    Ver:      string;
    Children: Children;
}

export interface Children {
    InstLst: any[];
    Ver:     string;
}
